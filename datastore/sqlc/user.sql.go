// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, pass_hash FROM users WHERE email = ?
`

type GetUserByEmailRow struct {
	ID       string
	Name     string
	Email    sql.NullString
	PassHash string
}

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PassHash,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :exec
INSERT INTO users (id, email, name, pass_hash) VALUES (?, ?, ?, ?)
`

type InsertUserParams struct {
	ID       string
	Email    sql.NullString
	Name     string
	PassHash string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) error {
	_, err := q.db.ExecContext(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Name,
		arg.PassHash,
	)
	return err
}
