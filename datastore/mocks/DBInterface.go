// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	invoice "github.com/samverrall/invoice-api-service/gen/invoice"

	mock "github.com/stretchr/testify/mock"
)

// DBInterface is an autogenerated mock type for the DBInterface type
type DBInterface struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, id, email, password, name
func (_m *DBInterface) CreateUser(ctx context.Context, id string, email string, password string, name string) error {
	ret := _m.Called(ctx, id, email, password, name)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) error); ok {
		r0 = rf(ctx, id, email, password, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *DBInterface) GetUserByEmail(ctx context.Context, email string) (*invoice.User, error) {
	ret := _m.Called(ctx, email)

	var r0 *invoice.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *invoice.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoice.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewDBInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewDBInterface creates a new instance of DBInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDBInterface(t NewDBInterfaceT) *DBInterface {
	mock := &DBInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
