// Code generated by goa v3.7.3, DO NOT EDIT.
//
// auth HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/samverrall/spacecms-api/invoice/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	auth "github.com/samverrall/spacecms-api/gen/auth"
	goahttp "goa.design/goa/v3/http"
)

// BuildCreateAccountRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "CreateAccount" endpoint
func (c *Client) BuildCreateAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateAccountAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "CreateAccount", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateAccountRequest returns an encoder for requests sent to the auth
// CreateAccount server.
func EncodeCreateAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*auth.User)
		if !ok {
			return goahttp.ErrInvalidType("auth", "CreateAccount", "*auth.User", v)
		}
		body := NewCreateAccountRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("auth", "CreateAccount", err)
		}
		return nil
	}
}

// DecodeCreateAccountResponse returns a decoder for responses returned by the
// auth CreateAccount endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateAccountResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "servererror" (type *goa.ServiceError): http.StatusInternalServerError
//	- "badrequest" (type *goa.ServiceError): http.StatusBadRequest
//	- "notfound" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeCreateAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			return nil, nil
		case http.StatusUnauthorized:
			var (
				body CreateAccountUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "CreateAccount", err)
			}
			err = ValidateCreateAccountUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "CreateAccount", err)
			}
			return nil, NewCreateAccountUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body CreateAccountServererrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "CreateAccount", err)
			}
			err = ValidateCreateAccountServererrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "CreateAccount", err)
			}
			return nil, NewCreateAccountServererror(&body)
		case http.StatusBadRequest:
			var (
				body CreateAccountBadrequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "CreateAccount", err)
			}
			err = ValidateCreateAccountBadrequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "CreateAccount", err)
			}
			return nil, NewCreateAccountBadrequest(&body)
		case http.StatusNotFound:
			var (
				body CreateAccountNotfoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "CreateAccount", err)
			}
			err = ValidateCreateAccountNotfoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "CreateAccount", err)
			}
			return nil, NewCreateAccountNotfound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "CreateAccount", resp.StatusCode, string(body))
		}
	}
}

// BuildGrantTokenRequest instantiates a HTTP request object with method and
// path set to call the "auth" service "GrantToken" endpoint
func (c *Client) BuildGrantTokenRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GrantTokenAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("auth", "GrantToken", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGrantTokenRequest returns an encoder for requests sent to the auth
// GrantToken server.
func EncodeGrantTokenRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*auth.GrantTokenPayload)
		if !ok {
			return goahttp.ErrInvalidType("auth", "GrantToken", "*auth.GrantTokenPayload", v)
		}
		if p.Token != nil {
			v := *p.Token
			req.AddCookie(&http.Cookie{
				Name:  "__Host-token",
				Value: v,
			})
		}
		body := NewGrantTokenRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("auth", "GrantToken", err)
		}
		return nil
	}
}

// DecodeGrantTokenResponse returns a decoder for responses returned by the
// auth GrantToken endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeGrantTokenResponse may return the following errors:
//	- "unauthorized" (type *goa.ServiceError): http.StatusUnauthorized
//	- "servererror" (type *goa.ServiceError): http.StatusInternalServerError
//	- "badrequest" (type *goa.ServiceError): http.StatusBadRequest
//	- "notfound" (type *goa.ServiceError): http.StatusNotFound
//	- error: internal error
func DecodeGrantTokenResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GrantTokenResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "GrantToken", err)
			}
			err = ValidateGrantTokenResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "GrantToken", err)
			}
			var (
				token    *string
				tokenRaw string

				cookies = resp.Cookies()
			)
			for _, c := range cookies {
				switch c.Name {
				case "__Host-token":
					tokenRaw = c.Value
				}
			}
			if tokenRaw != "" {
				token = &tokenRaw
			}
			res := NewGrantTokenTokenOK(&body, token)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body GrantTokenUnauthorizedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "GrantToken", err)
			}
			err = ValidateGrantTokenUnauthorizedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "GrantToken", err)
			}
			return nil, NewGrantTokenUnauthorized(&body)
		case http.StatusInternalServerError:
			var (
				body GrantTokenServererrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "GrantToken", err)
			}
			err = ValidateGrantTokenServererrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "GrantToken", err)
			}
			return nil, NewGrantTokenServererror(&body)
		case http.StatusBadRequest:
			var (
				body GrantTokenBadrequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "GrantToken", err)
			}
			err = ValidateGrantTokenBadrequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "GrantToken", err)
			}
			return nil, NewGrantTokenBadrequest(&body)
		case http.StatusNotFound:
			var (
				body GrantTokenNotfoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("auth", "GrantToken", err)
			}
			err = ValidateGrantTokenNotfoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("auth", "GrantToken", err)
			}
			return nil, NewGrantTokenNotfound(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("auth", "GrantToken", resp.StatusCode, string(body))
		}
	}
}
