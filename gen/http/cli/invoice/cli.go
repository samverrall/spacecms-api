// Code generated by goa v3.7.3, DO NOT EDIT.
//
// invoice HTTP client CLI support package
//
// Command:
// $ goa gen github.com/samverrall/spacecms-api/invoice/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	invoicec "github.com/samverrall/spacecms-api/gen/http/invoice/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `invoice (create-account|grant-token)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` invoice create-account --body '{
      "email": "Et ut.",
      "id": "Aut quod deserunt voluptas libero et quas.",
      "name": "Et quaerat quasi maxime nam est fugiat.",
      "password": "Sequi et dolore."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		invoiceFlags = flag.NewFlagSet("invoice", flag.ContinueOnError)

		invoiceCreateAccountFlags    = flag.NewFlagSet("create-account", flag.ExitOnError)
		invoiceCreateAccountBodyFlag = invoiceCreateAccountFlags.String("body", "REQUIRED", "")

		invoiceGrantTokenFlags         = flag.NewFlagSet("grant-token", flag.ExitOnError)
		invoiceGrantTokenBodyFlag      = invoiceGrantTokenFlags.String("body", "REQUIRED", "")
		invoiceGrantTokenGrantTypeFlag = invoiceGrantTokenFlags.String("grant-type", "access_token", "")
		invoiceGrantTokenTokenFlag     = invoiceGrantTokenFlags.String("token", "", "")
	)
	invoiceFlags.Usage = invoiceUsage
	invoiceCreateAccountFlags.Usage = invoiceCreateAccountUsage
	invoiceGrantTokenFlags.Usage = invoiceGrantTokenUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "invoice":
			svcf = invoiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "invoice":
			switch epn {
			case "create-account":
				epf = invoiceCreateAccountFlags

			case "grant-token":
				epf = invoiceGrantTokenFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "invoice":
			c := invoicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-account":
				endpoint = c.CreateAccount()
				data, err = invoicec.BuildCreateAccountPayload(*invoiceCreateAccountBodyFlag)
			case "grant-token":
				endpoint = c.GrantToken()
				data, err = invoicec.BuildGrantTokenPayload(*invoiceGrantTokenBodyFlag, *invoiceGrantTokenGrantTypeFlag, *invoiceGrantTokenTokenFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// invoiceUsage displays the usage of the invoice command and its subcommands.
func invoiceUsage() {
	fmt.Fprintf(os.Stderr, `RESTFUL API Backend for Invoicify. An open source invoicing web app.
Usage:
    %[1]s [globalflags] invoice COMMAND [flags]

COMMAND:
    create-account: Create an account by email address and password.
    grant-token: Create an account by email address and password.

Additional help:
    %[1]s invoice COMMAND --help
`, os.Args[0])
}
func invoiceCreateAccountUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] invoice create-account -body JSON

Create an account by email address and password.
    -body JSON:

Example:
    %[1]s invoice create-account --body '{
      "email": "Et ut.",
      "id": "Aut quod deserunt voluptas libero et quas.",
      "name": "Et quaerat quasi maxime nam est fugiat.",
      "password": "Sequi et dolore."
   }'
`, os.Args[0])
}

func invoiceGrantTokenUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] invoice grant-token -body JSON -grant-type STRING -token STRING

Create an account by email address and password.
    -body JSON:
    -grant-type STRING:
    -token STRING:

Example:
    %[1]s invoice grant-token --body '{
      "email": "Laborum facilis libero.",
      "password": "Eligendi quis."
   }' --grant-type "access_token" --token "Autem est culpa est fuga voluptas."
`, os.Args[0])
}
