// Code generated by goa v3.7.3, DO NOT EDIT.
//
// cms HTTP server types
//
// Command:
// $ goa gen github.com/samverrall/spacecms-api/spacecms-api/design

package server

import (
	cms "github.com/samverrall/spacecms-api/gen/cms"
	goa "goa.design/goa/v3/pkg"
)

// CreatePageRequestBody is the type of the "cms" service "CreatePage" endpoint
// HTTP request body.
type CreatePageRequestBody struct {
	// Page UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Page URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Page template UUID
	TemplateID *string `form:"templateId,omitempty" json:"templateId,omitempty" xml:"templateId,omitempty"`
	// Page active
	IsActive  *bool            `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	Meta      *MetaRequestBody `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	CreatedAt *string          `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
}

// CreateTemplateRequestBody is the type of the "cms" service "CreateTemplate"
// endpoint HTTP request body.
type CreateTemplateRequestBody struct {
	// Template UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the template
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Entry block of the template
	BlockID   *string `form:"blockId,omitempty" json:"blockId,omitempty" xml:"blockId,omitempty"`
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
}

// CreatePageUnauthorizedResponseBody is the type of the "cms" service
// "CreatePage" endpoint HTTP response body for the "unauthorized" error.
type CreatePageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePageServererrorResponseBody is the type of the "cms" service
// "CreatePage" endpoint HTTP response body for the "servererror" error.
type CreatePageServererrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePageBadrequestResponseBody is the type of the "cms" service
// "CreatePage" endpoint HTTP response body for the "badrequest" error.
type CreatePageBadrequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreatePageNotfoundResponseBody is the type of the "cms" service "CreatePage"
// endpoint HTTP response body for the "notfound" error.
type CreatePageNotfoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateUnauthorizedResponseBody is the type of the "cms" service
// "CreateTemplate" endpoint HTTP response body for the "unauthorized" error.
type CreateTemplateUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateServererrorResponseBody is the type of the "cms" service
// "CreateTemplate" endpoint HTTP response body for the "servererror" error.
type CreateTemplateServererrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateBadrequestResponseBody is the type of the "cms" service
// "CreateTemplate" endpoint HTTP response body for the "badrequest" error.
type CreateTemplateBadrequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateTemplateNotfoundResponseBody is the type of the "cms" service
// "CreateTemplate" endpoint HTTP response body for the "notfound" error.
type CreateTemplateNotfoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MetaRequestBody is used to define fields on request body types.
type MetaRequestBody struct {
	// Page meta title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Page meta description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// NewCreatePageUnauthorizedResponseBody builds the HTTP response body from the
// result of the "CreatePage" endpoint of the "cms" service.
func NewCreatePageUnauthorizedResponseBody(res *goa.ServiceError) *CreatePageUnauthorizedResponseBody {
	body := &CreatePageUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePageServererrorResponseBody builds the HTTP response body from the
// result of the "CreatePage" endpoint of the "cms" service.
func NewCreatePageServererrorResponseBody(res *goa.ServiceError) *CreatePageServererrorResponseBody {
	body := &CreatePageServererrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePageBadrequestResponseBody builds the HTTP response body from the
// result of the "CreatePage" endpoint of the "cms" service.
func NewCreatePageBadrequestResponseBody(res *goa.ServiceError) *CreatePageBadrequestResponseBody {
	body := &CreatePageBadrequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePageNotfoundResponseBody builds the HTTP response body from the
// result of the "CreatePage" endpoint of the "cms" service.
func NewCreatePageNotfoundResponseBody(res *goa.ServiceError) *CreatePageNotfoundResponseBody {
	body := &CreatePageNotfoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateTemplate" endpoint of the "cms" service.
func NewCreateTemplateUnauthorizedResponseBody(res *goa.ServiceError) *CreateTemplateUnauthorizedResponseBody {
	body := &CreateTemplateUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateServererrorResponseBody builds the HTTP response body from
// the result of the "CreateTemplate" endpoint of the "cms" service.
func NewCreateTemplateServererrorResponseBody(res *goa.ServiceError) *CreateTemplateServererrorResponseBody {
	body := &CreateTemplateServererrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateBadrequestResponseBody builds the HTTP response body from
// the result of the "CreateTemplate" endpoint of the "cms" service.
func NewCreateTemplateBadrequestResponseBody(res *goa.ServiceError) *CreateTemplateBadrequestResponseBody {
	body := &CreateTemplateBadrequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateTemplateNotfoundResponseBody builds the HTTP response body from the
// result of the "CreateTemplate" endpoint of the "cms" service.
func NewCreateTemplateNotfoundResponseBody(res *goa.ServiceError) *CreateTemplateNotfoundResponseBody {
	body := &CreateTemplateNotfoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreatePagePayload builds a cms service CreatePage endpoint payload.
func NewCreatePagePayload(body *CreatePageRequestBody, token *string) *cms.CreatePagePayload {
	v := &cms.CreatePagePayload{
		ID:         *body.ID,
		URL:        *body.URL,
		TemplateID: *body.TemplateID,
		IsActive:   *body.IsActive,
		CreatedAt:  *body.CreatedAt,
	}
	v.Meta = unmarshalMetaRequestBodyToCmsMeta(body.Meta)
	v.Token = token

	return v
}

// NewCreateTemplatePayload builds a cms service CreateTemplate endpoint
// payload.
func NewCreateTemplatePayload(body *CreateTemplateRequestBody, token *string) *cms.CreateTemplatePayload {
	v := &cms.CreateTemplatePayload{
		ID:        *body.ID,
		Name:      *body.Name,
		BlockID:   body.BlockID,
		CreatedAt: *body.CreatedAt,
	}
	v.Token = token

	return v
}

// ValidateCreatePageRequestBody runs the validations defined on
// CreatePageRequestBody
func ValidateCreatePageRequestBody(body *CreatePageRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.TemplateID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("templateId", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isActive", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreateTemplateRequestBody runs the validations defined on
// CreateTemplateRequestBody
func ValidateCreateTemplateRequestBody(body *CreateTemplateRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}
