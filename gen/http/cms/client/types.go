// Code generated by goa v3.7.3, DO NOT EDIT.
//
// cms HTTP client types
//
// Command:
// $ goa gen github.com/samverrall/spacecms-api/spacecms-api/design

package client

import (
	cms "github.com/samverrall/spacecms-api/gen/cms"
	goa "goa.design/goa/v3/pkg"
)

// CreatePageRequestBody is the type of the "cms" service "CreatePage" endpoint
// HTTP request body.
type CreatePageRequestBody struct {
	// Page UUID
	ID string `form:"id" json:"id" xml:"id"`
	// Page URL
	URL string `form:"url" json:"url" xml:"url"`
	// Page template UUID
	TemplateID string `form:"templateId" json:"templateId" xml:"templateId"`
	// Page active
	IsActive  bool             `form:"isActive" json:"isActive" xml:"isActive"`
	Meta      *MetaRequestBody `form:"meta" json:"meta" xml:"meta"`
	CreatedAt string           `form:"createdAt" json:"createdAt" xml:"createdAt"`
}

// CreatePageResponseBody is the type of the "cms" service "CreatePage"
// endpoint HTTP response body.
type CreatePageResponseBody struct {
	// Page UUID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Page URL
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// Page template UUID
	TemplateID *string `form:"templateId,omitempty" json:"templateId,omitempty" xml:"templateId,omitempty"`
	// Page active
	IsActive  *bool             `form:"isActive,omitempty" json:"isActive,omitempty" xml:"isActive,omitempty"`
	Meta      *MetaResponseBody `form:"meta,omitempty" json:"meta,omitempty" xml:"meta,omitempty"`
	CreatedAt *string           `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
}

// CreatePageUnauthorizedResponseBody is the type of the "cms" service
// "CreatePage" endpoint HTTP response body for the "unauthorized" error.
type CreatePageUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatePageServererrorResponseBody is the type of the "cms" service
// "CreatePage" endpoint HTTP response body for the "servererror" error.
type CreatePageServererrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatePageBadrequestResponseBody is the type of the "cms" service
// "CreatePage" endpoint HTTP response body for the "badrequest" error.
type CreatePageBadrequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreatePageNotfoundResponseBody is the type of the "cms" service "CreatePage"
// endpoint HTTP response body for the "notfound" error.
type CreatePageNotfoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MetaRequestBody is used to define fields on request body types.
type MetaRequestBody struct {
	// Page meta title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Page meta description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// MetaResponseBody is used to define fields on response body types.
type MetaResponseBody struct {
	// Page meta title
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// Page meta description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// NewCreatePageRequestBody builds the HTTP request body from the payload of
// the "CreatePage" endpoint of the "cms" service.
func NewCreatePageRequestBody(p *cms.CreatePagePayload) *CreatePageRequestBody {
	body := &CreatePageRequestBody{
		ID:         p.ID,
		URL:        p.URL,
		TemplateID: p.TemplateID,
		IsActive:   p.IsActive,
		CreatedAt:  p.CreatedAt,
	}
	if p.Meta != nil {
		body.Meta = marshalCmsMetaToMetaRequestBody(p.Meta)
	}
	return body
}

// NewCreatePagePageCreated builds a "cms" service "CreatePage" endpoint result
// from a HTTP "Created" response.
func NewCreatePagePageCreated(body *CreatePageResponseBody) *cms.Page {
	v := &cms.Page{
		ID:         *body.ID,
		URL:        *body.URL,
		TemplateID: *body.TemplateID,
		IsActive:   *body.IsActive,
		CreatedAt:  *body.CreatedAt,
	}
	v.Meta = unmarshalMetaResponseBodyToCmsMeta(body.Meta)

	return v
}

// NewCreatePageUnauthorized builds a cms service CreatePage endpoint
// unauthorized error.
func NewCreatePageUnauthorized(body *CreatePageUnauthorizedResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePageServererror builds a cms service CreatePage endpoint
// servererror error.
func NewCreatePageServererror(body *CreatePageServererrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePageBadrequest builds a cms service CreatePage endpoint badrequest
// error.
func NewCreatePageBadrequest(body *CreatePageBadrequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreatePageNotfound builds a cms service CreatePage endpoint notfound
// error.
func NewCreatePageNotfound(body *CreatePageNotfoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreatePageResponseBody runs the validations defined on
// CreatePageResponseBody
func ValidateCreatePageResponseBody(body *CreatePageResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.TemplateID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("templateId", "body"))
	}
	if body.IsActive == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("isActive", "body"))
	}
	if body.Meta == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("meta", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.ID != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.id", *body.ID, goa.FormatUUID))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.createdAt", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreatePageUnauthorizedResponseBody runs the validations defined on
// CreatePage_unauthorized_Response_Body
func ValidateCreatePageUnauthorizedResponseBody(body *CreatePageUnauthorizedResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatePageServererrorResponseBody runs the validations defined on
// CreatePage_servererror_Response_Body
func ValidateCreatePageServererrorResponseBody(body *CreatePageServererrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatePageBadrequestResponseBody runs the validations defined on
// CreatePage_badrequest_Response_Body
func ValidateCreatePageBadrequestResponseBody(body *CreatePageBadrequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreatePageNotfoundResponseBody runs the validations defined on
// CreatePage_notfound_Response_Body
func ValidateCreatePageNotfoundResponseBody(body *CreatePageNotfoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
