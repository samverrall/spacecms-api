// Code generated by goa v3.7.3, DO NOT EDIT.
//
// invoice HTTP client CLI support package
//
// Command:
// $ goa gen github.com/samverrall/spacecms-api/invoice/design

package client

import (
	"encoding/json"
	"fmt"

	invoice "github.com/samverrall/spacecms-api/gen/invoice"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateAccountPayload builds the payload for the invoice CreateAccount
// endpoint from CLI flags.
func BuildCreateAccountPayload(invoiceCreateAccountBody string) (*invoice.User, error) {
	var err error
	var body CreateAccountRequestBody
	{
		err = json.Unmarshal([]byte(invoiceCreateAccountBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Et ut.\",\n      \"id\": \"Aut quod deserunt voluptas libero et quas.\",\n      \"name\": \"Et quaerat quasi maxime nam est fugiat.\",\n      \"password\": \"Sequi et dolore.\"\n   }'")
		}
	}
	v := &invoice.User{
		ID:       body.ID,
		Email:    body.Email,
		Name:     body.Name,
		Password: body.Password,
	}

	return v, nil
}

// BuildGrantTokenPayload builds the payload for the invoice GrantToken
// endpoint from CLI flags.
func BuildGrantTokenPayload(invoiceGrantTokenBody string, invoiceGrantTokenGrantType string, invoiceGrantTokenToken string) (*invoice.GrantTokenPayload, error) {
	var err error
	var body GrantTokenRequestBody
	{
		err = json.Unmarshal([]byte(invoiceGrantTokenBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Laborum facilis libero.\",\n      \"password\": \"Eligendi quis.\"\n   }'")
		}
	}
	var grantType string
	{
		if invoiceGrantTokenGrantType != "" {
			grantType = invoiceGrantTokenGrantType
			if !(grantType == "access_token" || grantType == "refresh_token") {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("grantType", grantType, []interface{}{"access_token", "refresh_token"}))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var token *string
	{
		if invoiceGrantTokenToken != "" {
			token = &invoiceGrantTokenToken
		}
	}
	v := &invoice.GrantTokenPayload{
		Email:    body.Email,
		Password: body.Password,
	}
	v.GrantType = grantType
	v.Token = token

	return v, nil
}
