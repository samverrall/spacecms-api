// Code generated by goa v3.7.3, DO NOT EDIT.
//
// invoice HTTP server types
//
// Command:
// $ goa gen github.com/samverrall/invoice-api-service/invoice/design

package server

import (
	invoice "github.com/samverrall/invoice-api-service/gen/invoice"
	goa "goa.design/goa/v3/pkg"
)

// CreateAccountRequestBody is the type of the "invoice" service
// "CreateAccount" endpoint HTTP request body.
type CreateAccountRequestBody struct {
	// ID of the user
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Email address of the user
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// Full name of the user
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Password of the user. This is never returned to the client.
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// AuthoriseLoginRequestBody is the type of the "invoice" service
// "AuthoriseLogin" endpoint HTTP request body.
type AuthoriseLoginRequestBody struct {
	// User email
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// User password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// AuthoriseLoginResponseBody is the type of the "invoice" service
// "AuthoriseLogin" endpoint HTTP response body.
type AuthoriseLoginResponseBody struct {
	AccessToken            string `form:"accessToken" json:"accessToken" xml:"accessToken"`
	RefreshToken           string `form:"refreshToken" json:"refreshToken" xml:"refreshToken"`
	AccessExpiryTime       int64  `form:"accessExpiryTime" json:"accessExpiryTime" xml:"accessExpiryTime"`
	RefreshExpiryTime      int64  `form:"refreshExpiryTime" json:"refreshExpiryTime" xml:"refreshExpiryTime"`
	AccessExpiryTimeStamp  string `form:"accessExpiryTimeStamp" json:"accessExpiryTimeStamp" xml:"accessExpiryTimeStamp"`
	RefreshExpiryTimeStamp string `form:"refreshExpiryTimeStamp" json:"refreshExpiryTimeStamp" xml:"refreshExpiryTimeStamp"`
}

// CreateAccountUnauthorizedResponseBody is the type of the "invoice" service
// "CreateAccount" endpoint HTTP response body for the "unauthorized" error.
type CreateAccountUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAccountServererrorResponseBody is the type of the "invoice" service
// "CreateAccount" endpoint HTTP response body for the "servererror" error.
type CreateAccountServererrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAccountBadrequestResponseBody is the type of the "invoice" service
// "CreateAccount" endpoint HTTP response body for the "badrequest" error.
type CreateAccountBadrequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateAccountNotfoundResponseBody is the type of the "invoice" service
// "CreateAccount" endpoint HTTP response body for the "notfound" error.
type CreateAccountNotfoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthoriseLoginUnauthorizedResponseBody is the type of the "invoice" service
// "AuthoriseLogin" endpoint HTTP response body for the "unauthorized" error.
type AuthoriseLoginUnauthorizedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthoriseLoginServererrorResponseBody is the type of the "invoice" service
// "AuthoriseLogin" endpoint HTTP response body for the "servererror" error.
type AuthoriseLoginServererrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthoriseLoginBadrequestResponseBody is the type of the "invoice" service
// "AuthoriseLogin" endpoint HTTP response body for the "badrequest" error.
type AuthoriseLoginBadrequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AuthoriseLoginNotfoundResponseBody is the type of the "invoice" service
// "AuthoriseLogin" endpoint HTTP response body for the "notfound" error.
type AuthoriseLoginNotfoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewAuthoriseLoginResponseBody builds the HTTP response body from the result
// of the "AuthoriseLogin" endpoint of the "invoice" service.
func NewAuthoriseLoginResponseBody(res *invoice.Token) *AuthoriseLoginResponseBody {
	body := &AuthoriseLoginResponseBody{
		AccessToken:            res.AccessToken,
		RefreshToken:           res.RefreshToken,
		AccessExpiryTime:       res.AccessExpiryTime,
		RefreshExpiryTime:      res.RefreshExpiryTime,
		AccessExpiryTimeStamp:  res.AccessExpiryTimeStamp,
		RefreshExpiryTimeStamp: res.RefreshExpiryTimeStamp,
	}
	return body
}

// NewCreateAccountUnauthorizedResponseBody builds the HTTP response body from
// the result of the "CreateAccount" endpoint of the "invoice" service.
func NewCreateAccountUnauthorizedResponseBody(res *goa.ServiceError) *CreateAccountUnauthorizedResponseBody {
	body := &CreateAccountUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAccountServererrorResponseBody builds the HTTP response body from
// the result of the "CreateAccount" endpoint of the "invoice" service.
func NewCreateAccountServererrorResponseBody(res *goa.ServiceError) *CreateAccountServererrorResponseBody {
	body := &CreateAccountServererrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAccountBadrequestResponseBody builds the HTTP response body from
// the result of the "CreateAccount" endpoint of the "invoice" service.
func NewCreateAccountBadrequestResponseBody(res *goa.ServiceError) *CreateAccountBadrequestResponseBody {
	body := &CreateAccountBadrequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAccountNotfoundResponseBody builds the HTTP response body from the
// result of the "CreateAccount" endpoint of the "invoice" service.
func NewCreateAccountNotfoundResponseBody(res *goa.ServiceError) *CreateAccountNotfoundResponseBody {
	body := &CreateAccountNotfoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthoriseLoginUnauthorizedResponseBody builds the HTTP response body from
// the result of the "AuthoriseLogin" endpoint of the "invoice" service.
func NewAuthoriseLoginUnauthorizedResponseBody(res *goa.ServiceError) *AuthoriseLoginUnauthorizedResponseBody {
	body := &AuthoriseLoginUnauthorizedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthoriseLoginServererrorResponseBody builds the HTTP response body from
// the result of the "AuthoriseLogin" endpoint of the "invoice" service.
func NewAuthoriseLoginServererrorResponseBody(res *goa.ServiceError) *AuthoriseLoginServererrorResponseBody {
	body := &AuthoriseLoginServererrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthoriseLoginBadrequestResponseBody builds the HTTP response body from
// the result of the "AuthoriseLogin" endpoint of the "invoice" service.
func NewAuthoriseLoginBadrequestResponseBody(res *goa.ServiceError) *AuthoriseLoginBadrequestResponseBody {
	body := &AuthoriseLoginBadrequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAuthoriseLoginNotfoundResponseBody builds the HTTP response body from the
// result of the "AuthoriseLogin" endpoint of the "invoice" service.
func NewAuthoriseLoginNotfoundResponseBody(res *goa.ServiceError) *AuthoriseLoginNotfoundResponseBody {
	body := &AuthoriseLoginNotfoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateAccountUser builds a invoice service CreateAccount endpoint payload.
func NewCreateAccountUser(body *CreateAccountRequestBody) *invoice.User {
	v := &invoice.User{
		ID:       body.ID,
		Email:    *body.Email,
		Name:     *body.Name,
		Password: *body.Password,
	}

	return v
}

// NewAuthoriseLoginPayload builds a invoice service AuthoriseLogin endpoint
// payload.
func NewAuthoriseLoginPayload(body *AuthoriseLoginRequestBody, grantType string, token *string) *invoice.AuthoriseLoginPayload {
	v := &invoice.AuthoriseLoginPayload{
		Email:    *body.Email,
		Password: *body.Password,
	}
	v.GrantType = grantType
	v.Token = token

	return v
}

// ValidateCreateAccountRequestBody runs the validations defined on
// CreateAccountRequestBody
func ValidateCreateAccountRequestBody(body *CreateAccountRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}

// ValidateAuthoriseLoginRequestBody runs the validations defined on
// AuthoriseLoginRequestBody
func ValidateAuthoriseLoginRequestBody(body *AuthoriseLoginRequestBody) (err error) {
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	return
}
