// Code generated by goa v3.7.3, DO NOT EDIT.
//
// cms service
//
// Command:
// $ goa gen github.com/samverrall/spacecms-api/spacecms-api/design

package cms

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// CMS service for SpaceCMS. An open source content management system.
type Service interface {
	// Create a page
	CreatePage(context.Context, *CreatePagePayload) (err error)
	// Create a template.
	CreateTemplate(context.Context, *CreateTemplatePayload) (err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "cms"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"CreatePage", "CreateTemplate"}

// CreatePagePayload is the payload type of the cms service CreatePage method.
type CreatePagePayload struct {
	// JWT used for authentication
	Token *string
	// Page UUID
	ID string
	// Page URL
	URL string
	// Page template UUID
	TemplateID string
	// Page active
	IsActive  bool
	Meta      *Meta
	CreatedAt string
}

// CreateTemplatePayload is the payload type of the cms service CreateTemplate
// method.
type CreateTemplatePayload struct {
	// JWT used for authentication
	Token *string
	// Template UUID
	ID string
	// Name of the template
	Name string
	// Entry block of the template
	BlockID   *string
	CreatedAt string
}

type Meta struct {
	// Page meta title
	Title *string
	// Page meta description
	Description *string
}

// MakeUnauthorized builds a goa.ServiceError from an error.
func MakeUnauthorized(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "unauthorized",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeServererror builds a goa.ServiceError from an error.
func MakeServererror(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "servererror",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadrequest builds a goa.ServiceError from an error.
func MakeBadrequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "badrequest",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeNotfound builds a goa.ServiceError from an error.
func MakeNotfound(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "notfound",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}
